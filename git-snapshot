#!/bin/bash

# Author: Adam Hintz <adamh.zero@gmail.com>

# Git Snapshot: make a stash of your current status and then immediately apply
# it so you can continue work

# Takes parameters -u, -p, and an optional message (which defaults to 'Snapshot:
# <branchname> <datetime>')

if [[ $# == 1 && ($1 == -h || $1 == --help || $1 == help) ]]; then
   echo "Usage:"
   echo "    git snapshot [-u|-p] [message]"
   echo
   echo "Options:"
   echo "    -u  Use '--untracked' when stashing"
   echo "    -p  Use '--patch' when stashing"
   echo
   echo "'Message' is prepended by \"Snapshot:\" or defaults to:"
   echo "Snapshot: <branchname> <datetime>"
   exit 1
fi

UNTRACKED=0
PATCH=0

if [[ $1 == -u ]]; then
   UNTRACKED=1
   shift 1
elif [[ $1 == -p ]]; then
   PATCH=1
   shift 1
fi

SNAPSHOT=""

# If there's something left, it's what we use in the snapshot name
if [[ ! -z "$@" ]]; then
   SNAPSHOT="Snapshot: $@"
else
   BRANCHNAME=`git rev-parse --abbrev-ref HEAD`
   if [[ $BRANCHNAME == HEAD ]]; then
      # HEAD is not a suitable differentiator; we're not on a branch. So use
      # the short commit hash
      BRANCHNAME=`git rev-parse --short HEAD`
   fi
   # Default to 'Snapshot @ <datetime>'
   SNAPSHOT="Snapshot @ `date`"
fi

COMMAND="git stash save"

if [[ $UNTRACKED == 1 ]]; then
   COMMAND="$COMMAND -u"
elif [[ $PATCH == 1 ]]; then
   COMMAND="$COMMAND -p"
fi

COMMAND="$COMMAND \"$SNAPSHOT\""

OUTPUT=`$COMMAND`

# Unfortunately `git stash save` doesn't return an error if there are no local
# changes to save, so you have to look through the output for a failure and
# fail it yourself.
echo "$OUTPUT" | grep "No local changes to save" > /dev/null 2>&1

if [[ $? != 0 ]]; then
    git stash apply
else
    echo "No local changes to save; snapshot not saved"
    exit 1
fi

